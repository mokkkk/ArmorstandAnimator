using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;
using SFB;

namespace ArmorstandAnimator
{
    public class GenerateAnimationMcfunction : MonoBehaviour
    {
        // モデル用ファンクション
        [SerializeField]
        private GenerateModelMcfunc modelMcfunc;

        // モデル名
        private string modelName;
        // アニメーション名
        private string animationName;


        // 署名
        private const string FuncAuthor = "# This function was generated by ArmorstandAnimator : made by @nukknu99";
        // データパックフォルダ名
        private const string DatapackFolderName = "asa_animator";
        // キーフレームフォルダ名
        private const string KeyframesFolderName = "keyframes";

        public void GenerateDatapack(GeneralSettingUI generalSetting, AnimationSettingUI animationSetting, List<Node> nodeList, List<Keyframe> keyframeList)
        {
            /*
            // ファイルパス決定
            var extensionList = new[]
            {
    new ExtensionFilter( "folder", "")
};
            var paths = StandaloneFileBrowser.OpenFilePanel("Save File", "", extensionList, false);
            // ファイルを選択しなかった場合，中断
            if (paths.Length < 1)
                return;
            var path = paths[0];
            */

            var path = Path.Combine(Application.dataPath, "Test");

            // モデル名，アニメーション名取得
            modelName = generalSetting.ModelName;
            animationName = animationSetting.AnimationName;

            // データパックフォルダ作成
            path = Path.Combine(path, DatapackFolderName);
            Directory.CreateDirectory(path);

            // ファンクションフォルダ作成
            path = Path.Combine(path, "functions");
            Directory.CreateDirectory(path);

            // モデル名フォルダ作成
            path = Path.Combine(path, generalSetting.ModelName.ToLower());
            Directory.CreateDirectory(path);

            // summon.mcfunction
            modelMcfunc.GenerateSummonFunction(path, generalSetting, nodeList);
            // model.mcfunction   
            modelMcfunc.GenerateModelFunction(path, generalSetting, nodeList);

            // アニメーション名フォルダ作成
            path = Path.Combine(path, animationSetting.AnimationName.ToLower());
            Directory.CreateDirectory(path);

            // start.mcfunction
            GenerateStartFunction(path, keyframeList[0], nodeList);
            // main.mcfunction
            GenerateMainFunction(path, keyframeList);
            // end.mcfunction
            GenerateEndFunction(path);

            // Keyframesフォルダ作成
            path = Path.Combine(path, KeyframesFolderName);
            Directory.CreateDirectory(path);

            // index.mcfunction
            GenerateKeyframeFunction(path, keyframeList, nodeList);

            Debug.Log("Animation Datapack Exported");
        }


        // start.mcfunction
        private void GenerateStartFunction(string path, Keyframe keyframe, List<Node> nodeList)
        {
            // ファイルパス決定
            path = Path.Combine(path, "start.mcfunction");
            // .mcfunction書き込み用
            var writer = new StreamWriter(path, false);

            // 各ノードのPose.Headをkeyframeのrotationsに設定
            int i = 0;
            foreach (Node n in nodeList)
            {
                string selector = $"@e[type=armor_stand,tag={modelName}Parts,tag={n.nodeName}]";
                string func = $"execute as {selector} run data merge entity @s {{Pose:{{Head:[{keyframe.rotations[i].x}f,{keyframe.rotations[i].y}f,{keyframe.rotations[i].z}f]}}}}";
                writer.WriteLine(func);
                i++;
            }

            // 終了
            writer.Flush();
            writer.Close();

            Debug.Log("Generated start mcfunction");
        }

        // main.mcfunction
        private void GenerateMainFunction(string path, List<Keyframe> keyframeList)
        {
            // ファイルパス決定
            path = Path.Combine(path, "main.mcfunction");
            // .mcfunction書き込み用
            var writer = new StreamWriter(path, false);

            // Rootタイマー増加
            var func = $"scoreboard players add @s AsaMatrix 1";
            writer.WriteLine(func);

            // start実行
            var execute = $"execute if score @s AsaMatrix matches 1 run ";
            func = $"function asa_animator:{modelName.ToLower()}/{animationName.ToLower()}/start";
            writer.WriteLine(execute + func);


            for (int i = 0; i < keyframeList.Count - 1; i++)
            {
                // 各Keyframeのfunction実行
                execute = $"execute if score @s AsaMatrix matches {keyframeList[i].tick + 1} run ";
                func = $"function asa_animator:{modelName.ToLower()}/{animationName.ToLower()}/{KeyframesFolderName}/{i}";
                writer.WriteLine(execute + func);

                // Root移動実行
                // アニメーション時間(tick)
                var time = keyframeList[i + 1].tick - keyframeList[i].tick;
                // 移動距離
                var moveX = (keyframeList[i + 1].rootPos.x - keyframeList[i].rootPos.x) / time;
                var moveY = (keyframeList[i + 1].rootPos.y - keyframeList[i].rootPos.y) / time;
                var moveZ = (keyframeList[i + 1].rootPos.z - keyframeList[i].rootPos.z) / time;
                // 書き込み
                execute = $"execute if score @s AsaMatrix matches {keyframeList[i].tick + 1}..{keyframeList[i + 1].tick} run ";
                func = $"tp @s ^{moveX} ^{moveY} ^{moveZ}";
                writer.WriteLine(execute + func);
            }

            // end実行
            execute = $"execute if score @s AsaMatrix matches {keyframeList[keyframeList.Count - 1].tick + 1}.. run ";
            func = $"function asa_animator:{modelName.ToLower()}/{animationName.ToLower()}/end";
            writer.WriteLine(execute + func);

            // animate実行
            execute = $"execute as @e[type=armor_stand,tag={modelName}Parts] run ";
            func = $"function #asa_matrix:animate";
            writer.WriteLine(execute + func);

            // model実行
            func = $"function asa_animator:{modelName.ToLower()}/model";
            writer.WriteLine(func);

            // 終了
            writer.Flush();
            writer.Close();

            Debug.Log("Generated main mcfunction");
        }

        // end.mcfunction
        private void GenerateEndFunction(string path)
        {
            // ファイルパス決定
            path = Path.Combine(path, "end.mcfunction");
            // .mcfunction書き込み用
            var writer = new StreamWriter(path, false);

            // Rootのタイマーリセット
            var func = $"scoreboard players set @s AsaMatrix 0";
            writer.WriteLine(func);

            // 各ノードのArmorItems[3].tag.Rotateをリセット
            var selector = $"@e[type=armor_stand,tag={modelName}Parts]";
            func = $"execute as {selector} run function #asa_matrix:animate_reset";
            writer.WriteLine(func);

            // 終了
            writer.Flush();
            writer.Close();

            Debug.Log("Generated end mcfunction");
        }

        // keyframes/index.mcfunction
        private void GenerateKeyframeFunction(string path, List<Keyframe> keyframeList, List<Node> nodeList)
        {
            // ファイルパス
            string funcPath = "";
            // .mcfunction書き込み用
            StreamWriter writer;

            // 各ノードのArmorItems[3].tag.Rotateをkeyframeのrotationsに設定
            for (int i = 0; i < keyframeList.Count - 1; i++)
            {
                // パス決定
                funcPath = Path.Combine(path, $"{i}.mcfunction");
                writer = new StreamWriter(funcPath, false);

                // アニメーション時間(tick)
                var time = keyframeList[i + 1].tick - keyframeList[i].tick;

                int j = 0;
                foreach (Node n in nodeList)
                {
                    // rotations取得
                    var rotateX = Mathf.FloorToInt((keyframeList[i + 1].rotations[j].x - keyframeList[i].rotations[j].x) * 1000 / time);
                    var rotateY = Mathf.FloorToInt((keyframeList[i + 1].rotations[j].y - keyframeList[i].rotations[j].y) * 1000 / time);
                    var rotateZ = Mathf.FloorToInt((keyframeList[i + 1].rotations[j].z - keyframeList[i].rotations[j].z) * 1000 / time);
                    string func = $"scoreboard players set #asa_animate_x AsaMatrix {rotateX}";
                    writer.WriteLine(func);
                    func = $"scoreboard players set #asa_animate_y AsaMatrix {rotateY}";
                    writer.WriteLine(func);
                    func = $"scoreboard players set #asa_animate_z AsaMatrix {rotateZ}";
                    writer.WriteLine(func);
                    // animate_setparam実行
                    string selector = $"@e[type=armor_stand,tag={modelName}Parts,tag={n.nodeName}]";
                    func = $"execute as {selector} run function #asa_matrix:animate_setparam";
                    writer.WriteLine(func);
                    j++;
                }

                // 終了
                writer.Flush();
                writer.Close();
            }

            Debug.Log("Generated keyframe mcfunction");
        }
    }
}