using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace ArmorstandAnimator
{
    public class GenerateModelMcfunc : MonoBehaviour
    {
        private GeneralSettingUI generalSetting;
        private System.IO.StreamWriter writer;

        private const float ScoreboardMultiple = 1000.0f;

        private const string FuncAuthor = "# This function was generated by ArmorstandAnimator : made by @nukknu99";

        private const string FuncGetMatrixRoot = "function #asa_matrix:matrix";
        private const string FuncGetParentPos = "function #asa_matrix:get_parent_pos";
        private const string FuncGetMatrix = "function #asa_matrix:matrix_node";
        private const string FuncGetChildPos = "function #asa_matrix:rotate";
        private const string FuncSetChildPos = "function #asa_matrix:set_child_pos";

        // Summon.mcfunction
        public void GenerateSummonFunction(GeneralSettingUI generalSetting, List<Node> nodeList)
        {
            this.generalSetting = generalSetting;

            // summon armor_stand ~ ~ ~ {Marker:1b,Invisible:1b,Tags:["TAD"],ArmorItems:[{},{},{},{id:"minecraft:barrier",Count:1b,tag:{CustomModelData:123,RotateX:0,RotateY:0,RotateZ:0}}]}

            // .mcfunction書き込み用
            writer = new System.IO.StreamWriter(Application.dataPath + "\\ArmorstandAnimator\\Test\\test_summon.mcfunction", false);
            string line = "";

            // Author
            line = FuncAuthor;
            writer.WriteLine(line);

            // Root
            writer.WriteLine(ArmorstandNbtRoot());

            // Parts
            foreach (Node n in nodeList)
            {
                writer.WriteLine(ArmorstandNbt(n));
            }

            writer.Flush();
            writer.Close();

            Debug.Log("Generated summon mcfunction");
        }

        private string ArmorstandNbtRoot()
        {
            var line = $"summon armor_stand ~ ~ ~ {{Marker:1b,Invisible:1b,Tags:[\"{generalSetting.ModelName}Root\"]}}";
            return line;
        }

        private string ArmorstandNbt(Node node)
        {
            var line = $"summon armor_stand ~ ~ ~ {{Marker:1b,Invisible:1b,Tags:[\"{generalSetting.ModelName}Parts\",\"{node.nodeName}\"],ArmorItems:[{{}},{{}},{{}},{{id:\"minecraft:{generalSetting.CmdItemID}\",Count:1b,tag:{{CustomModelData:{node.customModelData},RotateX:0,RotateY:0,RotateZ:0}}}}],Pose:{{Head:[{node.rotate.x}f,{node.rotate.y}f,{node.rotate.z}f]}}}}";

            return line;
        }

        // Model.mcfunction
        public void GenerateModelFunction(GeneralSettingUI generalSetting, List<Node> nodeList)
        {
            this.generalSetting = generalSetting;

            // RootNodeのみ抽出
            var rootNodeList = new List<Node>();
            foreach (Node n in nodeList)
            {
                if (n.nodeType == NodeType.Root)
                    rootNodeList.Add(n);
            }

            // .mcfunction書き込み用
            writer = new System.IO.StreamWriter(Application.dataPath + "\\ArmorstandAnimator\\Test\\test_model.mcfunction", false);
            string line = "";

            // Author
            line = FuncAuthor;
            writer.WriteLine(line);

            // Root matrix
            writer.WriteLine(GetRootMatrix());

            // 各Rootノードで実行
            foreach (Node rootNode in rootNodeList)
            {
                // Rootノード位置設定
                writer.WriteLine(SetRootNodePosition(rootNode));
                // 回転行列計算
                CalcRotation(rootNode);
            }

            writer.Flush();
            writer.Close();

            Debug.Log("Generated model mcfunction");
        }

        // root_matrix
        private string GetRootMatrix()
        {
            var line = FuncGetMatrixRoot;
            return line;
        }

        // rootnode_position
        private string SetRootNodePosition(Node node)
        {
            var line = $"execute as @e[type=armor_stand,tag={generalSetting.ModelName}Parts,tag={node.nodeName},limit=1] rotated ~ 0 run tp @s ^{-node.pos.x} ^{node.pos.y} ^{node.pos.z} ~ ~";
            return line;
        }

        private void CalcRotation(Node node)
        {
            // parent_pos取得
            writer.WriteLine(GetParentPos(node));
            // 回転行列計算
            writer.WriteLine(GetNodeMatrix(node));

            // 全子ノードの位置更新
            foreach (Node n in node.childrenNode)
            {
                // child_pos取得
                var pos = GetChildPos(n);
                writer.WriteLine(pos[0]);
                writer.WriteLine(pos[1]);
                writer.WriteLine(pos[2]);
                // child_pos回転
                writer.WriteLine(FuncGetChildPos);
                // child_pos更新
                writer.WriteLine(SetChildPos(n));
            }

            // 子ノードのうち，子を持つノードにおいてCalcRotation実行
            foreach (Node n in node.childrenNode)
            {
                if (n.nodeType == NodeType.Node)
                    CalcRotation(n);
            }
        }

        // get parent_pos
        private string GetParentPos(Node node)
        {
            var line = $"execute as @e[type=armor_stand,tag={generalSetting.ModelName}Parts,tag={node.nodeName},limit=1] at @s run {FuncGetParentPos}";
            return line;
        }

        // node_matrix
        private string GetNodeMatrix(Node node)
        {
            var line = $"execute as @e[type=armor_stand,tag={generalSetting.ModelName}Parts,tag={node.nodeName},limit=1] run {FuncGetMatrix}";
            return line;
        }

        // get child_pos
        private string[] GetChildPos(Node node)
        {
            var line = new string[3];

            var x = Mathf.FloorToInt(-node.pos.x * ScoreboardMultiple);
            line[0] = $"scoreboard players set #asa_child_pos_x AsaMatrix {x}";
            var y = Mathf.FloorToInt(node.pos.y * ScoreboardMultiple);
            line[1] = $"scoreboard players set #asa_child_pos_y AsaMatrix {y}";
            var z = Mathf.FloorToInt(node.pos.z * ScoreboardMultiple);
            line[2] = $"scoreboard players set #asa_child_pos_z AsaMatrix {z}";

            return line;
        }

        // set child_pos
        private string SetChildPos(Node node)
        {
            var line = $"execute as @e[type=armor_stand,tag={generalSetting.ModelName}Parts,tag={node.nodeName},limit=1] run {FuncSetChildPos}";
            return line;
        }
    }
}